"""
Copyright 2023 Dolby Laboratories

Redistribution and use in source and binary forms, with or without modification, are permitted 
provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this list of conditions 
and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions
and the following disclaimer in the documentation and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or 
promote products derived from this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS “AS IS” AND ANY EXPRESS OR IMPLIED 
WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A 
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR 
ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED 
TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING 
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
POSSIBILITY OF SUCH DAMAGE.
"""

import json
from os import PathLike
from typing import Union, Dict, Any, Optional

import numpy as np

from universal_transcoder.auxiliars.conventions import get_convention
from universal_transcoder.auxiliars.get_input_channels import (
    get_input_channels_ambisonics,
)
from universal_transcoder.auxiliars.my_coordinates import MyCoordinates


def get_allrad_decoder(
    file_name_json: Union[str, PathLike],
    type: str,
    order: int,
    convention: str,
    normalize_energy: bool = False,
    layout: Optional[MyCoordinates] = None,
    mean_normalization: bool = True,
):
    """Function to import a decoding matrix generated by AllRad plugin"""

    with open(file_name_json, "r") as file:
        dictionary: Dict[str, Any] = dict(json.load(file))

    decoding_matrix = np.array(dictionary["Decoder"]["Matrix"])

    # Apply inphase or maxre
    if type == "maxre":
        maxre = maxre_weights(order)
        decoding_matrix = np.multiply(decoding_matrix, maxre)
    elif type == "inphase":
        inphase = inphase_weights(order)
        decoding_matrix = np.multiply(decoding_matrix, inphase)
    elif type == "basic":
        pass
    else:
        raise ValueError(
            f"Unknown type '{type}'. Only 'basic', 'maxre' or 'inphase' supported."
        )

    # if SN3D, apply changes
    if convention == "sn3d":
        adapter = get_convention("n3d2sn3d", order)
        decoding_matrix = decoding_matrix / adapter
    elif convention == "n3d":
        pass
    else:
        raise ValueError(
            f"Unknown convention '{convention}'. Only 'n3d' or 'sn3d' supported."
        )

    if normalize_energy:
        if layout is None:
            raise ValueError(
                "If energy is to be normalized, then the loudpseaker layout is required"
            )

        input_matrix = get_input_channels_ambisonics(layout, order)
        if convention == "n3d":
            # The input matrix is SN3D so it needs to be adapted
            adapter = get_convention("n3d2sn3d", order)
            input_matrix = input_matrix / adapter
        spk_gains = input_matrix @ decoding_matrix.T
        if mean_normalization:
            sum_of_squares = np.sqrt(np.mean(np.sum(spk_gains**2, 1)))
        else:
            sum_of_squares = np.mean(np.sum(spk_gains**2, 1))
        # sum_of_squares with dimension = to loudspeakers' number
        max_gain = np.max(sum_of_squares)
        # and then normalize the matrix globally
        decoding_matrix /= max_gain

    return decoding_matrix


def maxre_weights(order: int):
    """Function to generate the max-re weights to apply to the basic decoding matrix generated
    by AllRad plugin"""
    """https://git.iem.at/audioplugins/IEMPluginSuite/-/blob/master/resources/MaxRE.h"""

    weights = np.array([1.0])
    if order == 0:
        weights = np.array([1.0])
    elif order == 1:
        weights = np.array(
            [
                1.0,
                5.7754104119288496e-01,
                5.7754104119288496e-01,
                5.7754104119288496e-01,
            ]
        )
    elif order == 2:
        weights = np.array(
            [
                1.0,
                7.7520766107019334e-01,
                7.7520766107019334e-01,
                7.7520766107019334e-01,
                4.0142037667287966e-01,
                4.0142037667287966e-01,
                4.0142037667287966e-01,
                4.0142037667287966e-01,
                4.0142037667287966e-01,
            ]
        )
    elif order == 3:
        weights = np.array(
            [
                1.0,
                8.6155075887658639e-01,
                8.6155075887658639e-01,
                8.6155075887658639e-01,
                6.1340456518123299e-01,
                6.1340456518123299e-01,
                6.1340456518123299e-01,
                6.1340456518123299e-01,
                6.1340456518123299e-01,
                3.0643144179936538e-01,
                3.0643144179936538e-01,
                3.0643144179936538e-01,
                3.0643144179936538e-01,
                3.0643144179936538e-01,
                3.0643144179936538e-01,
                3.0643144179936538e-01,
            ]
        )
    elif order == 4:
        weights = np.array(
            [
                1.0,
                9.0644136637224459e-01,
                9.0644136637224459e-01,
                9.0644136637224459e-01,
                7.3245392600617265e-01,
                7.3245392600617265e-01,
                7.3245392600617265e-01,
                7.3245392600617265e-01,
                7.3245392600617265e-01,
                5.0224998490808703e-01,
                5.0224998490808703e-01,
                5.0224998490808703e-01,
                5.0224998490808703e-01,
                5.0224998490808703e-01,
                5.0224998490808703e-01,
                5.0224998490808703e-01,
                2.4736484001129033e-01,
                2.4736484001129033e-01,
                2.4736484001129033e-01,
                2.4736484001129033e-01,
                2.4736484001129033e-01,
                2.4736484001129033e-01,
                2.4736484001129033e-01,
                2.4736484001129033e-01,
                2.4736484001129033e-01,
            ]
        )
    elif order == 5:
        weights = np.array(
            [
                1.0,
                9.3263709143129281e-01,
                9.3263709143129281e-01,
                9.3263709143129281e-01,
                8.0471791647013236e-01,
                8.0471791647013236e-01,
                8.0471791647013236e-01,
                8.0471791647013236e-01,
                8.0471791647013236e-01,
                6.2909156744472861e-01,
                6.2909156744472861e-01,
                6.2909156744472861e-01,
                6.2909156744472861e-01,
                6.2909156744472861e-01,
                6.2909156744472861e-01,
                6.2909156744472861e-01,
                4.2321128963220900e-01,
                4.2321128963220900e-01,
                4.2321128963220900e-01,
                4.2321128963220900e-01,
                4.2321128963220900e-01,
                4.2321128963220900e-01,
                4.2321128963220900e-01,
                4.2321128963220900e-01,
                4.2321128963220900e-01,
                2.0719132924646289e-01,
                2.0719132924646289e-01,
                2.0719132924646289e-01,
                2.0719132924646289e-01,
                2.0719132924646289e-01,
                2.0719132924646289e-01,
                2.0719132924646289e-01,
                2.0719132924646289e-01,
                2.0719132924646289e-01,
                2.0719132924646289e-01,
                2.0719132924646289e-01,
            ]
        )

    return weights


def inphase_weights(order: int):
    """Function to generate the inphase weights to apply to the basic decoding matrix generated
    by AllRad plugin"""
    """https://git.iem.at/audioplugins/IEMPluginSuite/-/blob/master/resources/inPhase.h"""

    weights = np.array([1.0])
    if order == 0:
        weights = np.array([1.0])
    elif order == 1:
        weights = np.array(
            [
                1.0,
                3.3333333333333331e-01,
                3.3333333333333331e-01,
                3.3333333333333331e-01,
            ]
        )
    elif order == 2:
        weights = np.array(
            [
                1.0,
                5.0000000000000000e-01,
                5.0000000000000000e-01,
                5.0000000000000000e-01,
                1.0000000000000001e-01,
                1.0000000000000001e-01,
                1.0000000000000001e-01,
                1.0000000000000001e-01,
                1.0000000000000001e-01,
            ]
        )
    elif order == 3:
        weights = np.array(
            [
                1.0,
                5.9999999999999998e-01,
                5.9999999999999998e-01,
                5.9999999999999998e-01,
                2.0000000000000001e-01,
                2.0000000000000001e-01,
                2.0000000000000001e-01,
                2.0000000000000001e-01,
                2.0000000000000001e-01,
                2.8571428571428571e-02,
                2.8571428571428571e-02,
                2.8571428571428571e-02,
                2.8571428571428571e-02,
                2.8571428571428571e-02,
                2.8571428571428571e-02,
                2.8571428571428571e-02,
            ]
        )
    elif order == 4:
        weights = np.array(
            [
                1.0,
                6.6666666666666663e-01,
                6.6666666666666663e-01,
                6.6666666666666663e-01,
                2.8571428571428570e-01,
                2.8571428571428570e-01,
                2.8571428571428570e-01,
                2.8571428571428570e-01,
                2.8571428571428570e-01,
                7.1428571428571425e-02,
                7.1428571428571425e-02,
                7.1428571428571425e-02,
                7.1428571428571425e-02,
                7.1428571428571425e-02,
                7.1428571428571425e-02,
                7.1428571428571425e-02,
                7.9365079365079361e-03,
                7.9365079365079361e-03,
                7.9365079365079361e-03,
                7.9365079365079361e-03,
                7.9365079365079361e-03,
                7.9365079365079361e-03,
                7.9365079365079361e-03,
                7.9365079365079361e-03,
                7.9365079365079361e-03,
            ]
        )
    elif order == 5:
        weights = np.array(
            [
                1.0,
                7.1428571428571430e-01,
                7.1428571428571430e-01,
                7.1428571428571430e-01,
                3.5714285714285715e-01,
                3.5714285714285715e-01,
                3.5714285714285715e-01,
                3.5714285714285715e-01,
                3.5714285714285715e-01,
                1.1904761904761904e-01,
                1.1904761904761904e-01,
                1.1904761904761904e-01,
                1.1904761904761904e-01,
                1.1904761904761904e-01,
                1.1904761904761904e-01,
                1.1904761904761904e-01,
                2.3809523809523808e-02,
                2.3809523809523808e-02,
                2.3809523809523808e-02,
                2.3809523809523808e-02,
                2.3809523809523808e-02,
                2.3809523809523808e-02,
                2.3809523809523808e-02,
                2.3809523809523808e-02,
                2.3809523809523808e-02,
                2.1645021645021645e-03,
                2.1645021645021645e-03,
                2.1645021645021645e-03,
                2.1645021645021645e-03,
                2.1645021645021645e-03,
                2.1645021645021645e-03,
                2.1645021645021645e-03,
                2.1645021645021645e-03,
                2.1645021645021645e-03,
                2.1645021645021645e-03,
                2.1645021645021645e-03,
            ]
        )

    return weights
